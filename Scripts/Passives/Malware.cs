using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UnityEngine;
using Dungeonator;
using ItemAPI;
using System.Collections;

namespace Knives
{
    class Malware : PassiveItem
    {
        public static void Register()
        {
            //The name of the item
            string itemName = "C Drive of Malware";

            //Refers to an embedded png in the project. Make sure to embed your resources! Google it
            string resourceName = "Knives/Resources/C Drive of Malware";

            //Create new GameObject
            GameObject obj = new GameObject(itemName);

            //Add a PassiveItem component to the object
            var item = obj.AddComponent<Malware>();

            //Adds a sprite component to the object and adds your texture to the item sprite collection
            ItemBuilder.AddSpriteToObject(itemName, resourceName, obj);

            //Ammonomicon entry variables
            string shortDesc = "Scared Of Nothing";
            string longDesc =

                "An old computer hard disk drive with several mods downloaded on it. It was thrown away for fear of downloading malware. The gundead share in this fear." +
                "\n\n\n - Knife_to_a_Gunfight";

            //Adds the item to the gungeon item list, the ammonomicon, the loot table, etc.
            //Do this after ItemBuilder.AddSpriteToObject!
            ItemBuilder.SetupItem(item, shortDesc, longDesc, "ski");

            //Adds the actual passive effect to the item
            //PlayerController owner = item.LastOwner as PlayerController;

            item.sprite.renderer.material.shader = ShaderCache.Acquire("Brave/Internal/GlitchUnlit");
            item.sprite.usesOverrideMaterial = true;
            item.sprite.renderer.material.SetFloat("_GlitchInterval", 0.08f);
            item.sprite.renderer.material.SetFloat("_DispProbability", 0.4f);
            item.sprite.renderer.material.SetFloat("_DispIntensity", 0.03f);
            item.sprite.renderer.material.SetFloat("_ColorProbability", 0.4f);
            item.sprite.renderer.material.SetFloat("_ColorIntensity", 0.04f);

            //Set the rarity of the item


            item.quality = PickupObject.ItemQuality.B;
            ID = item.PickupObjectId;


        }

        public static int ID;

        public override void Pickup(PlayerController player)
        {
            Malware.fleeData = new FleePlayerData();
            Malware.fleeData.Player = player;
            
            Malware.fleeData.StartDistance = 20f;

            player.PostProcessProjectile += this.PostProcessProjectile;
            base.Pickup(player);
        }
        private System.Random rng = new System.Random();
        private void PostProcessProjectile(Projectile source, float chance)
        {
            chance = rng.Next(1, 10);
            if (chance == 1)
            {
                source.OnHitEnemy = (Action<Projectile, SpeculativeRigidbody, bool>)Delegate.Combine(source.OnHitEnemy, new Action<Projectile, SpeculativeRigidbody, bool>(this.HandleHitEnemy));
                source.sprite.renderer.material.shader = ShaderCache.Acquire("Brave/Internal/GlitchUnlit");
                source.sprite.usesOverrideMaterial = true;
                source.sprite.renderer.material.SetFloat("_GlitchInterval", 0.1f);
                source.sprite.renderer.material.SetFloat("_DispProbability", 0.03f);
                source.sprite.renderer.material.SetFloat("_DispIntensity", 0.03f);
                source.sprite.renderer.material.SetFloat("_ColorProbability", 0.4f);
                source.sprite.renderer.material.SetFloat("_ColorIntensity", 0.04f);
            }
        }

        public bool vangaurd = false;
        private void HandleHitEnemy(Projectile arg1, SpeculativeRigidbody arg2, bool arg3)
        {
            if (arg1!=null && arg2.aiActor.EnemyGuid != "465da2bb086a4a88a803f79fe3a27677")
            {
                arg2.sprite.renderer.material.shader = ShaderCache.Acquire("Brave/Internal/GlitchUnlit");
                arg2.sprite.usesOverrideMaterial = true;
                arg2.sprite.renderer.material.SetFloat("_GlitchInterval", 0.05f);
                arg2.sprite.renderer.material.SetFloat("_DispProbability", 0.4f);
                arg2.sprite.renderer.material.SetFloat("_DispIntensity", 0.04f);
                arg2.sprite.renderer.material.SetFloat("_ColorProbability", 0.4f);
                arg2.sprite.renderer.material.SetFloat("_ColorIntensity", 0.04f);
                vangaurd = true;
            }
            
        }

        public override DebrisObject Drop(PlayerController player)
        {
           
            player.PostProcessProjectile -= this.PostProcessProjectile;
            return base.Drop(player);

        }
        private static IEnumerator RemoveFear(AIActor aiactor)
        {
            yield return new WaitForSeconds(5f);
            aiactor.behaviorSpeculator.FleePlayerData = null;
            yield break;
        }
        public override void  Update()
        {
            if(this.Owner != null && vangaurd)
            {
                if(this.Owner.CurrentRoom != null)
                {

                    if (this.Owner.IsInCombat)
                    {
                        RoomHandler currentRoom = this.Owner.CurrentRoom;

                        foreach (AIActor aiactor in currentRoom.GetActiveEnemies(RoomHandler.ActiveEnemyType.All))
                        {
                            if (aiactor != null)
                            {

                                if (aiactor.sprite.renderer.material.shader != null)
                                {

                                    if (aiactor.sprite.renderer.material.shader == ShaderCache.Acquire("Brave/Internal/GlitchUnlit"))
                                    {

                                        aiactor.behaviorSpeculator.FleePlayerData = Malware.fleeData;
                                        GameManager.Instance.StartCoroutine(Malware.RemoveFear(aiactor));

                                    }
                                }
                            }

                        }
                    }
                   
                }
                
            }
           
            base.Update();
        }
        private static FleePlayerData fleeData;
    }
}


